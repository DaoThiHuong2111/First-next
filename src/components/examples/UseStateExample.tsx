'use client'

import { useState } from 'react'

/**
 * UseStateExample - Component demo useState hook
 * 
 * useState l√† hook c∆° b·∫£n nh·∫•t trong React ƒë·ªÉ qu·∫£n l√Ω state trong function component.
 * N√≥ tr·∫£ v·ªÅ m·ªôt m·∫£ng v·ªõi 2 ph·∫ßn t·ª≠: [state, setState]
 * 
 * C√∫ ph√°p: const [state, setState] = useState(initialValue)
 */
const UseStateExample = () => {
  // 1. State ƒë∆°n gi·∫£n cho counter
  const [count, setCount] = useState(0)
  
  // 2. State cho string
  const [name, setName] = useState('')
  
  // 3. State cho object
  const [user, setUser] = useState({
    name: '',
    email: '',
    age: 0
  })
  
  // 4. State cho array
  const [items, setItems] = useState<string[]>([])
  const [newItem, setNewItem] = useState('')
  
  // 5. State cho boolean
  const [isVisible, setIsVisible] = useState(false)
  
  // Handlers cho counter
  const handleIncrement = () => {
    // C√°ch 1: C·∫≠p nh·∫≠t tr·ª±c ti·∫øp
    setCount(count + 1)
  }
  
  const handleDecrement = () => {
    // C√°ch 2: S·ª≠ d·ª•ng function updater (recommended khi d·ª±a v√†o previous state)
    setCount(prevCount => prevCount - 1)
  }
  
  const handleReset = () => {
    setCount(0)
  }
  
  // Handler cho user object
  const handleUserChange = (field: keyof typeof user, value: string | number) => {
    // C·∫≠p nh·∫≠t object state - ph·∫£i t·∫°o object m·ªõi (immutable)
    setUser(prevUser => ({
      ...prevUser, // Spread operator ƒë·ªÉ gi·ªØ c√°c field kh√°c
      [field]: value // C·∫≠p nh·∫≠t field c·ª• th·ªÉ
    }))
  }
  
  // Handlers cho array
  const handleAddItem = () => {
    if (newItem.trim()) {
      // Th√™m item v√†o array - t·∫°o array m·ªõi
      setItems(prevItems => [...prevItems, newItem.trim()])
      setNewItem('') // Clear input
    }
  }
  
  const handleRemoveItem = (index: number) => {
    // X√≥a item kh·ªèi array - t·∫°o array m·ªõi
    setItems(prevItems => prevItems.filter((_, i) => i !== index))
  }
  
  const handleClearItems = () => {
    setItems([])
  }
  
  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      <h2 className="text-3xl font-bold text-gray-800 mb-6">
        üéØ useState Hook Examples
      </h2>
      
      {/* 1. Counter Example */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4 text-blue-600">
          1. Counter v·ªõi Number State
        </h3>
        <div className="flex items-center space-x-4">
          <span className="text-2xl font-bold text-gray-700">
            Count: {count}
          </span>
          <button
            onClick={handleIncrement}
            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition-colors"
          >
            +1
          </button>
          <button
            onClick={handleDecrement}
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded transition-colors"
          >
            -1
          </button>
          <button
            onClick={handleReset}
            className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded transition-colors"
          >
            Reset
          </button>
        </div>
      </div>
      
      {/* 2. String Input Example */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4 text-green-600">
          2. Text Input v·ªõi String State
        </h3>
        <div className="space-y-3">
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-gray-700">
            <strong>T√™n hi·ªán t·∫°i:</strong> {name || '(ch∆∞a nh·∫≠p)'}
          </p>
          <p className="text-sm text-gray-500">
            <strong>ƒê·ªô d√†i:</strong> {name.length} k√Ω t·ª±
          </p>
        </div>
      </div>
      
      {/* 3. Object State Example */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4 text-purple-600">
          3. Form v·ªõi Object State
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <input
            type="text"
            placeholder="T√™n"
            value={user.name}
            onChange={(e) => handleUserChange('name', e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
          />
          <input
            type="email"
            placeholder="Email"
            value={user.email}
            onChange={(e) => handleUserChange('email', e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
          />
          <input
            type="number"
            placeholder="Tu·ªïi"
            value={user.age || ''}
            onChange={(e) => handleUserChange('age', parseInt(e.target.value) || 0)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
          />
        </div>
        
        {/* Hi·ªÉn th·ªã th√¥ng tin user */}
        <div className="bg-purple-50 p-4 rounded-lg">
          <h4 className="font-semibold text-purple-800 mb-2">Th√¥ng tin User:</h4>
          <pre className="text-sm text-purple-700">
            {JSON.stringify(user, null, 2)}
          </pre>
        </div>
      </div>
      
      {/* 4. Array State Example */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4 text-orange-600">
          4. Todo List v·ªõi Array State
        </h3>
        
        {/* Add new item */}
        <div className="flex space-x-2 mb-4">
          <input
            type="text"
            value={newItem}
            onChange={(e) => setNewItem(e.target.value)}
            placeholder="Th√™m item m·ªõi..."
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
            onKeyPress={(e) => e.key === 'Enter' && handleAddItem()}
          />
          <button
            onClick={handleAddItem}
            className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Th√™m
          </button>
          <button
            onClick={handleClearItems}
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Clear All
          </button>
        </div>
        
        {/* Items list */}
        <div className="space-y-2">
          <p className="font-semibold text-gray-700">
            Items ({items.length}):
          </p>
          {items.length === 0 ? (
            <p className="text-gray-500 italic">Ch∆∞a c√≥ items n√†o</p>
          ) : (
            items.map((item, index) => (
              <div
                key={index}
                className="flex items-center justify-between bg-orange-50 p-3 rounded-lg"
              >
                <span className="text-gray-700">{item}</span>
                <button
                  onClick={() => handleRemoveItem(index)}
                  className="bg-red-400 hover:bg-red-500 text-white px-3 py-1 rounded text-sm transition-colors"
                >
                  X√≥a
                </button>
              </div>
            ))
          )}
        </div>
      </div>
      
      {/* 5. Boolean State Example */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4 text-indigo-600">
          5. Visibility Toggle v·ªõi Boolean State
        </h3>
        
        <button
          onClick={() => setIsVisible(!isVisible)}
          className="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded-lg transition-colors mb-4"
        >
          {isVisible ? '·∫®n' : 'Hi·ªán'} Content
        </button>
        
        {/* Conditional rendering d·ª±a tr√™n boolean state */}
        {isVisible && (
          <div className="bg-indigo-50 p-4 rounded-lg border-l-4 border-indigo-500">
            <h4 className="font-semibold text-indigo-800 mb-2">
              üéâ Content ƒë∆∞·ª£c hi·ªÉn th·ªã!
            </h4>
            <p className="text-indigo-700">
              ƒê√¢y l√† content ch·ªâ hi·ªÉn th·ªã khi isVisible = true. 
              Boolean state r·∫•t h·ªØu √≠ch ƒë·ªÉ ƒëi·ªÅu khi·ªÉn vi·ªác hi·ªÉn th·ªã/·∫©n components,
              toggles, modals, accordions, v√† nhi·ªÅu UI patterns kh√°c.
            </p>
          </div>
        )}
      </div>
      
      {/* Notes */}
      <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
        <h4 className="font-semibold text-yellow-800 mb-2">üìù L∆∞u √Ω quan tr·ªçng:</h4>
        <ul className="text-yellow-700 space-y-1 text-sm">
          <li>‚Ä¢ State l√† immutable - lu√¥n t·∫°o gi√° tr·ªã m·ªõi thay v√¨ mutate</li>
          <li>‚Ä¢ S·ª≠ d·ª•ng function updater khi state m·ªõi ph·ª• thu·ªôc v√†o state c≈©</li>
          <li>‚Ä¢ V·ªõi object/array, s·ª≠ d·ª•ng spread operator (...) ƒë·ªÉ t·∫°o copy</li>
          <li>‚Ä¢ State update l√† asynchronous - kh√¥ng expect gi√° tr·ªã m·ªõi ngay l·∫≠p t·ª©c</li>
          <li>‚Ä¢ M·ªói state update s·∫Ω trigger re-render component</li>
        </ul>
      </div>
    </div>
  )
}

export default UseStateExample 